<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jean-Luc's Blog]]></title>
  <link href="http://jlcanela.github.io/atom.xml" rel="self"/>
  <link href="http://jlcanela.github.io/"/>
  <updated>2014-11-03T11:42:21+01:00</updated>
  <id>http://jlcanela.github.io/</id>
  <author>
    <name><![CDATA[Jean-Luc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Service Deployment in 2014 [En]]]></title>
    <link href="http://jlcanela.github.io/blog/2014/11/03/web-service-deployment-2014/"/>
    <updated>2014-11-03T02:27:22+01:00</updated>
    <id>http://jlcanela.github.io/blog/2014/11/03/web-service-deployment-2014</id>
    <content type="html"><![CDATA[<p>Here are some thoughts about deploying a web service or a web application today, in 2014.</p>

<p>Let’s consider some expectations for the following roles:</p>

<ul>
<li>client : he expects the service to be reliable</li>
<li>provider : he requires ease of deployment, ease of testing &amp; maintenance</li>
</ul>


<h2>Reliability</h2>

<p>The 3 top issues are : </p>

<ul>
<li>service is not available (network) : we have to continuously check the service is available and fix the issue immediately. It can be a permanent or temporary network availability issue.</li>
<li>service is slow or is returning errors : errors must be automatically detected, sysadmin must be notified immediately to take action</li>
<li>service is returning incorrect result : current version of the service must have been validated by a QA team</li>
</ul>


<h2>Ease of deployment</h2>

<p>For the service to be easy to deploy:</p>

<ul>
<li>deployment is done via a single deploy command</li>
<li>deployment can made partially</li>
<li>constant checking is done during deployment</li>
<li>it’s always possible to come back</li>
<li>deploy a server farm is as simple as deploying a single server</li>
</ul>


<h2>Ease of testing and no-longer-painful maintenance</h2>

<p>Let’s imagine that:</p>

<ul>
<li>service execution data are collected and processed in realtime</li>
<li>execution data is automatically analysed</li>
<li>servers are automatically switched when necessary</li>
<li>it’s easy to add new servers when service load is increasing</li>
</ul>


<p>I&rsquo;m preparing a serie of article about Mesos / Marathon. This platform,  maybe, is a good opportunity to move in this direction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quel Avenir Pour Scala ? N'est Pas La Question. [FR]]]></title>
    <link href="http://jlcanela.github.io/blog/2013/02/26/quel-avenir-pour-scala-n-est-pas-la-question/"/>
    <updated>2013-02-26T02:27:22+01:00</updated>
    <id>http://jlcanela.github.io/blog/2013/02/26/quel-avenir-pour-scala-n-est-pas-la-question</id>
    <content type="html"><![CDATA[<p>J’ai été tenté d’écrire un article sur les incroyables capacités et potentiel du langage scala et de son écosystème. Quel que soit l’article vantant les mérites de telle ou telle technologie, que ce soit de la lessive, une voiture, le C++ et maintenant scala, on retrouve à peu prés les mêmes éléments marketing :« Performant » « Puissant » « Efficace » « Bla bla bla ».</p>

<h1>La technologie</h1>

<p>Lorsque l’on compare les différents langages, les différentes technologies, l’efficacité / performance varie souvent d’un facteur 3. En effet, l’accompagnement au changement, comme par exemple la formation, la migration logicielle, les changements dans les process de développement, etc, sont couteux et font que ce type de solution est difficilement maitrisable.</p>

<p>Ce n’est qu’en cas de saut technologique que ce facteur peut être largement supérieur - je ne parle pas des dépliants publicitaires bien sûr -.</p>

<h1>Sommes nous bloqués là ?</h1>

<p>Quel est l’objectif réel lorsqu’on choisit une nouvelle technologie ? La raison est souvent : « déveloper plus vite ». Et pourquoi déveloper plus vite ? <em>Pour livrer plus vite</em>.</p>

<h1>L’équipe</h1>

<p>Livrer plus vite. Une solution est d’utiliser une équipe plus compétente ou mieux formée:</p>

<ul>
<li>la recette idéale entre le meilleur ratio développeurs-seniors (+cher) et développeurs-juniors (moins-chers) est toujours en préparation;</li>
<li>le consensus est plutôt de bien maitriser la croissance de l’équipe et le « team building »;</li>
<li>la citation « neuf femmes ne font pas un bébé en un mois » est toujours d’actualité.</li>
</ul>


<p>En fonction de l’expérience, les développeurs vont choisir des solutions plus ou moins adaptées. La variabilité constatée est d’au moins entre 1 et 10, voire plus …</p>

<p>Livrer plus vite c’est bien, mais livrer quoi, telle est la question … ?</p>

<h1>Livrer, c’est quoi ?</h1>

<p>Il faut faire la différence entre:</p>

<ul>
<li>ce qui est livré : « la fonctionalité »;</li>
<li>celui qui l’utilise : l’utilisateur;</li>
<li>celui qui paye : l’acheteur.</li>
</ul>


<p>L’acheteur paye pour livrer la fonctionnalité à l’utilisateur.</p>

<p>Voici ce qui peut arriver:</p>

<ul>
<li>peu de livraisons ou peu d’utilisateur = faible nombre de transactions</li>
<li>valeur ajoutée fournie par la fonctionalité trop faible = transactions de faible montant</li>
<li>pas d’acheteur = pas de paiement</li>
</ul>


<p>La valeur ajoutée est déterminée en fonction du service rendu, et non pas en fonction du coût de production. Celle-ci pourrait concerner par exemple l’augmentation des revenus, la projection de la marque ou la rétention des clients.</p>

<h1>L’organisation</h1>

<p>Imaginons une organisation dont le contexte est le suivant:</p>

<ul>
<li>1.000.000 de clients, en constant renouvellement;</li>
<li>le coût du service est de 30€ / mois</li>
</ul>


<p>Considérons une fonctionalité de rétention des clients:</p>

<ul>
<li>rétention de 5.000 clients / mois;</li>
<li>bénéfice attendu = 150 k€ / mois</li>
<li>coût de développement négligeable = 10j de développeur</li>
<li>délai de livraison = 1 mois</li>
</ul>


<p>L’organisation dispose de plusieurs paramètres pour optimiser son développement. Les voici ordonnée par impact financier:</p>

<ul>
<li>sélection de la bonne fonctionnalité</li>
<li>réduction du délai de livraison - hypothèse de « déploiement continu » -</li>
<li>réduction du coût de développement</li>
</ul>


<p>On saisit rapidement l’impact des projets organisés autour de l’optimisation de la livraison de valeur ajoutée. La stratégie est tout simplement de commencer la livraison de la valeur ajoutée la plus élevée en premier.</p>

<p>On peut évaluer, au minimum, une différence de productivité (financiaire) de 1 à 100 entre les organisations qui tirent profit de ce type d’optimisations et les autres.</p>

<h1>Et scala dans tout ça ?</h1>

<p>Développer, en scala ou dans quelque langage que ce soit, ne me parait être en aucune façon une garantie de succès. L’impact de l’organisation sur le succès ou l’échec d’un projet me parait bien supérieur:</p>

<p>Impact de l’organisation : 1 à 100;
Impact des équipes : 1 à 10;
Impact des technologies : 1 à 3.
Si pour vous « retrospective meeting » ne rime pas avec itération, les méthodes agiles peuvent vous apporter un vrai plus dans votre productivité quotidienne.</p>

<p>Si pour vous un « retrospective meeting » est indispensable après chaque itération; je vous fais totalement confiance car au final vous avez obtenu votre organisation avec les bonnes personnes, les bons profils, et les bonnes technologies. D’ailleurs, vous avez déjà décidé sur le fait d’utiliser Scala ou non, n’est-ce pas ?</p>

<p>CQFD : « Quel avenir pour Scala ? » n’est pas la question.</p>
]]></content>
  </entry>
  
</feed>
