<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jean-Luc's Blog]]></title>
  <link href="http://jlcanela.github.io/atom.xml" rel="self"/>
  <link href="http://jlcanela.github.io/"/>
  <updated>2014-11-04T17:14:29+01:00</updated>
  <id>http://jlcanela.github.io/</id>
  <author>
    <name><![CDATA[Jean-Luc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting Marathon [En]]]></title>
    <link href="http://jlcanela.github.io/blog/2014/11/04/starting-marathon/"/>
    <updated>2014-11-04T11:27:22+01:00</updated>
    <id>http://jlcanela.github.io/blog/2014/11/04/starting-marathon</id>
    <content type="html"><![CDATA[<p>First setup the basic thing in local, and then run our first mesos command.</p>

<h2>Basic setup</h2>

<p>One can download Marathon directly from the website <a href="https://mesosphere.github.io/marathon/.">https://mesosphere.github.io/marathon/.</a></p>

<p>Let&rsquo;s deploy Marathon in ~/apps/marathon-0.6.0</p>

<h2>Starting the services</h2>

<p>Start the marathon server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/apps/marathon-0.6.0 <span class="o">&amp;&amp;</span> <span class="nv">MESOS_NATIVE_LIBRARY</span><span class="o">=</span><span class="s1">&#39;/usr/local/lib/libmesos.dylib&#39;</span> ./bin/start --master localhost:5050 --zk zk://localhost:2181/marathon
</span></code></pre></td></tr></table></div></figure>


<p>Check the services are ok:</p>

<ul>
<li>Marathon console is enabled at <a href="http://localhost:8080/">http://localhost:8080/</a>
We should have no active marathon service
<img src="http://jlcanela.github.io/images/marathon_console.png" title="Marathon console" alt="Marathon Console" /></li>
</ul>


<h2>Repository</h2>

<p>To deploy the same application in multiple nodes, an easy way is a shared repository.
Each version of the app and its dependencies must be available in the Deployment Repository.</p>

<p>Here is a simple structure for a Simple Web Service called SWS :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>└── SWS
</span><span class='line'>    ├── v1-first_revision
</span><span class='line'>    │   └── spray-test-assembly-0.1.jar
</span><span class='line'>    ├── v2-bug_included
</span><span class='line'>    │   └── my_app_v1.1.jar
</span><span class='line'>    └── v3-bug_fixed
</span><span class='line'>        └── my_app_v1.2.jar
</span></code></pre></td></tr></table></div></figure>


<p>The easy step to deploy this repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone <span class="o">(</span>**TODO : create a git repository **<span class="o">)</span>
</span><span class='line'><span class="nb">cd </span>dm_app_repository
</span><span class='line'>python -m SimpleHTTPServer
</span></code></pre></td></tr></table></div></figure>


<p>Check the repository is available: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://127.0.0.1:8000/SWS/
</span><span class='line'>&lt;!DOCTYPE html PUBLIC <span class="s2">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;&lt;html&gt;
</span><span class='line'>&lt;title&gt;Directory listing <span class="k">for</span> /SWS/&lt;/title&gt;
</span><span class='line'><span class="o">[</span>…<span class="o">]</span>
</span><span class='line'>&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;v1-first_revision/&quot;</span>&gt;v1-first_revision/&lt;/a&gt;
</span><span class='line'>&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;v2-bug_included/&quot;</span>&gt;v2-bug_included/&lt;/a&gt;
</span><span class='line'>&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;v3-bug_fixed/&quot;</span>&gt;v3-bug_fixed/&lt;/a&gt;
</span><span class='line'><span class="o">[</span>…<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test the application locally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -o spray-test-assembly-0.1.jar http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar
</span><span class='line'>java -jar spray-test-assembly-0.1.jar 8091
</span></code></pre></td></tr></table></div></figure>


<p>Open a browser at <a href="http://127.0.0.1:8091/,">http://127.0.0.1:8091/,</a> you should see an <em>hello</em> message.</p>

<h2>Deploy with Marathon</h2>

<p>We ready to start playing with Marathon. Let’s deploy our first app server with Marathon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{ &quot;id&quot;: &quot;sws1&quot;, &quot;cmd&quot;: &quot;java -jar spray-test-assembly-0.1.jar $PORT&quot;, &quot;mem&quot;: 256.0, &quot;instances&quot;: 1, &quot;uris&quot;: [ &quot;http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar&quot; ]}&#39;</span> http://127.0.0.1:8080/v2/apps
</span></code></pre></td></tr></table></div></figure>


<p>We can access directly the service from Marathon console.</p>

<p>If we need to deploy a second instance:</p>

<ul>
<li>go to marathon console at <a href="http://127.0.0.1:8080/,">http://127.0.0.1:8080/,</a> the console is displayed
<img src="http://jlcanela.github.io/images/marathon_console_app.png" title="Marathon Console" alt="Marathon Console" /></li>
<li>click the scale button, the scale window is displayed
<img src="http://jlcanela.github.io/images/marathon_scale_window.png" title="Scale Window" alt="Scale Window" /></li>
<li>select 2 instances and press OK, the marathon console is updated with 2 instances
<img src="http://jlcanela.github.io/images/marathon_updated_servers.png" title="Marathon Console with 2 instances" alt="Marathon Console with 2 instances" /></li>
</ul>


<h2>Troubleshooting</h2>

<h3>task identifier does not support uppercase</h3>

<p>Let&rsquo;s use an UPPERCASE identifier (SWS1), starting the task with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -X POST -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{ &quot;id&quot;: &quot;SWS1&quot;, &quot;cmd&quot;: &quot;java -jar spray-test-assembly-0.1.jar $PORT&quot;, &quot;mem&quot;: 256.0, &quot;instances&quot;: 1, &quot;uris&quot;: [ &quot;http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar&quot; ]}&#39;</span> http://127.0.0.1:8080/v2/apps
</span><span class='line'><span class="o">{</span><span class="s2">&quot;errors&quot;</span>:<span class="o">[{</span><span class="s2">&quot;attribute&quot;</span>:<span class="s2">&quot;id&quot;</span>,<span class="s2">&quot;error&quot;</span>:<span class="s2">&quot;must match \”^(([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])$\&quot;&quot;</span><span class="o">}]}</span>%
</span></code></pre></td></tr></table></div></figure>


<p>OK, we should have been used <em>sws1</em> as task indentifier.</p>

<h3>repository is down when starting a task</h3>

<p>(we have killed the repository, or the python server process in this case).</p>

<p>Start the task with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{ &quot;id&quot;: &quot;sws3&quot;, &quot;cmd&quot;: &quot;java -jar spray-test-assembly-0.1.jar $PORT&quot;, &quot;mem&quot;: 256.0, &quot;instances&quot;: 1, &quot;uris&quot;: [&quot;http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar&quot;] }&#39;</span> http://127.0.0.1:8080/v2/apps
</span><span class='line'>null%
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;null%&rdquo;, so no error. everything looks good. Right ? Hmm. No.
Why is the task not started in the Marathon console ? 
<img src="http://jlcanela.github.io/images/marathon_unstarted_task.png" title="Unstarted task" alt="Unstarted task" /></p>

<p>If we have a look at Marathon console logs, no details: </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>2014-11-04 11:43:47,195<span class="o">]</span> INFO Assigned some ports <span class="k">for</span> sws3: <span class="o">[</span>0<span class="o">]</span> -&gt; <span class="o">[</span>15603<span class="o">]</span> <span class="o">(</span>mesosphere.marathon.MarathonSchedulerService:78<span class="o">)</span>
</span><span class='line'><span class="o">[</span>2014-11-04 11:43:47,365<span class="o">]</span> INFO Starting app sws3 <span class="o">(</span>mesosphere.marathon.MarathonScheduler:223<span class="o">)</span>
</span><span class='line'><span class="o">[</span>2014-11-04 11:43:47,371<span class="o">]</span> INFO Need to scale sws3 from <span class="m">0</span> up to <span class="m">1</span> instances <span class="o">(</span>mesosphere.marathon.MarathonScheduler:338<span class="o">)</span>
</span><span class='line'><span class="o">[</span>2014-11-04 11:43:47,371<span class="o">]</span> INFO Queueing <span class="m">1</span> new tasks <span class="k">for</span> sws3 <span class="o">(</span><span class="m">0</span> queued<span class="o">)</span> <span class="o">(</span>mesosphere.marathon.MarathonScheduler:344<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we look at mesos console, we can see that the Framework is staging and repetedly failing:
<img src="http://jlcanela.github.io/images/marathon_task_staging.png" title="Staging task" alt="Staging task" /></p>

<p>But if we have a look at the Failed task error log, it&rsquo;s clearer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>WARNING: Logging before InitGoogleLogging<span class="o">()</span> is written to STDERR
</span><span class='line'>I1104 16:52:49.402339 <span class="m">37630720</span> fetcher.cpp:76<span class="o">]</span> Fetching URI <span class="s1">&#39;http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar&#39;</span>
</span><span class='line'>I1104 16:52:49.403532 <span class="m">37630720</span> fetcher.cpp:126<span class="o">]</span> Downloading <span class="s1">&#39;http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar&#39;</span> to <span class="s1">&#39;/tmp/mesos/slaves/20141104-103858-16777343-5050-9421-0/frameworks/20140902-013203-16777343-5050-4471-0000/executors/sws3.a09d4717-643a-11e4-bf70-e0f84706f8b6/runs/4209c508-40b7-4660-8c15-6b8a1a5dbe23/spray-test-assembly-0.1.jar&#39;</span>
</span><span class='line'>E1104 16:52:49.404134 <span class="m">37630720</span> fetcher.cpp:129<span class="o">]</span> Error downloading resource: Couldn<span class="s1">&#39;t connect to server</span>
</span><span class='line'><span class="s1">Failed to fetch: http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar</span>
</span><span class='line'><span class="s1">Failed to synchronize with slave (it&#39;</span>s probably exited<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So enable the repository and we finally get a running task: 
<img src="http://jlcanela.github.io/images/marathon_task_running.png" title="Running task" alt="Running task" /></p>

<h3>Not providing the uris correctly</h3>

<p>Marathon is expecting the parameter <em>&ldquo;uris&rdquo;: [ &ldquo;<a href="http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar">http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar</a>&rdquo; ]</em>. What happen if we try to use the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s1">&#39;{ &quot;id&quot;: &quot;sws2&quot;, &quot;cmd&quot;: &quot;java -jar spray-test-assembly-0.1.jar $PORT&quot;, &quot;mem&quot;: 256.0, &quot;instances&quot;: 1, &quot;uri&quot;: &quot;http://127.0.0.1:8000/SWS/v1-first_revision/spray-test-assembly-0.1.jar&quot; }&#39;</span> http://127.0.0.1:8080/v2/apps
</span></code></pre></td></tr></table></div></figure>


<p>Marathon console shows the task is switching between STAGING and FAILED states.</p>

<p>When we check the framework error log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>I1104 17:08:07.138018 <span class="m">125543168</span> exec.cpp:132<span class="o">]</span> Version: 0.20.0
</span><span class='line'>I1104 17:08:07.139219 <span class="m">184311808</span> exec.cpp:206<span class="o">]</span> Executor registered on slave 20141104-103858-16777343-5050-9421-0
</span><span class='line'>Error: Unable to access jarfile spray-test-assembly-0.1.jar
</span></code></pre></td></tr></table></div></figure>


<p>When we check the Framework STDOUT:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Registered executor on 172.16.0.17
</span><span class='line'>Starting task sws2.c368adc6-643c-11e4-bf70-e0f84706f8b6
</span><span class='line'>sh -c <span class="s1">&#39;java -jar spray-test-assembly-0.1.jar $PORT&#39;</span>
</span><span class='line'>Forked <span class="nb">command </span>at 17152
</span><span class='line'>Command exited with status <span class="m">1</span> <span class="o">(</span>pid: 17152<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>No file is downloaded nor installed. The task is starting fine, but the java process terminates with status = 1 as the jarfile is not downloaded.</p>

<p><strong>Important</strong>: Always use a <em>&ldquo;uris&rdquo; : [ &ldquo;url1&rdquo; ]</em> syntax.  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your First Mesos Command [En]]]></title>
    <link href="http://jlcanela.github.io/blog/2014/11/04/your-first-mesos-command/"/>
    <updated>2014-11-04T10:27:22+01:00</updated>
    <id>http://jlcanela.github.io/blog/2014/11/04/your-first-mesos-command</id>
    <content type="html"><![CDATA[<p>First setup the basic thing in local, and then run our first mesos command.</p>

<h2>Basic setup</h2>

<p>If you&rsquo;re an OS X user, you can install according to the documentation <a href="http://mesosphere.com/docs/getting-started/developer/brew-install/">http://mesosphere.com/docs/getting-started/developer/brew-install/</a> which is very didactic. <a href="http://mesosphere.com/docs/guides/">http://mesosphere.com/docs/guides/</a> contains a lot of useful information.</p>

<p>So once it&rsquo;s installed :</p>

<ul>
<li>Zookeeper is installed and started</li>
</ul>


<h2>Starting the services</h2>

<p>First, let’s check that Zookeeper is started:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jps <span class="p">|</span> grep QuorumPeerMain
</span></code></pre></td></tr></table></div></figure>


<p>if no process is listed, please check your Zookeeper setup.</p>

<p>Start the mesos master:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/sbin/mesos-master --registry<span class="o">=</span>in_memory --ip<span class="o">=</span>127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>Start the mesos slave:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /usr/local/sbin/mesos-slave --master<span class="o">=</span>127.0.0.1:5050
</span></code></pre></td></tr></table></div></figure>


<p>Check the services are ok:</p>

<ul>
<li>The Mesos console must be active at <a href="http://127.0.0.1:5050/#/">http://127.0.0.1:5050/#/</a>
At least one slave is activated
<img src="http://jlcanela.github.io/images/mesos_console.png" title="Mesos console" alt="Mesos Console" /></li>
</ul>


<h2>Start a simple mesos command</h2>

<p>Let&rsquo;s execute a simple <em>ls</em> command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mesos execute --master<span class="o">=</span>127.0.0.1:5050 --name<span class="o">=</span>Command --command<span class="o">=</span><span class="s2">&quot;ls&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Where to find logs</h2>

<p>Then go to the Mesos console and click on <strong>Framework</strong>.</p>

<p>The Framework view is displayed:
<img src="http://jlcanela.github.io/images/mesos_framework_view.png" title="Mesos Framework View" alt="Mesos Framework View" /></p>

<p>Then click in the Terminated framework link like <strong>…5050-9877-0000</strong>.</p>

<p>The Framework detail is displayed:
<img src="http://jlcanela.github.io/images/mesos_framework_detail.png" title="Mesos Framework Detail" alt="Mesos Framework Detail" /></p>

<p>Then click the sandbox link.
The sandbox window is opened:
<img src="http://jlcanela.github.io/images/mesos_sandbox.png" title="Sandbox window" alt="Sandbox window" /></p>

<p>Click the stdout link, the following log is displayed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Registered executor on 172.16.0.17
</span><span class='line'>Starting task Command
</span><span class='line'>sh -c <span class="s1">&#39;ls&#39;</span>
</span><span class='line'>Forked <span class="nb">command </span>at 10500
</span><span class='line'>stderr
</span><span class='line'>stdout
</span><span class='line'>Command exited with status <span class="m">0</span> <span class="o">(</span>pid: 10500<span class="o">)</span>
</span><span class='line'>Shutting down
</span><span class='line'>Sending SIGTERM to process tree at pid 10500
</span><span class='line'>Killing the following process trees:
</span><span class='line'><span class="o">[</span>
</span><span class='line'>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Important</strong> : the mesos console is your best friend, when something is wrong, always try to puzzle out the error logs accessible through the mesos framework view.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Service Deployment in 2014 [En]]]></title>
    <link href="http://jlcanela.github.io/blog/2014/11/03/web-service-deployment-2014/"/>
    <updated>2014-11-03T02:27:22+01:00</updated>
    <id>http://jlcanela.github.io/blog/2014/11/03/web-service-deployment-2014</id>
    <content type="html"><![CDATA[<p>Here are some thoughts about deploying a web service or a web application today, in 2014.</p>

<p>Let’s consider some expectations for the following roles:</p>

<ul>
<li>client : he expects the service to be reliable</li>
<li>provider : he requires ease of deployment, ease of testing &amp; maintenance</li>
</ul>


<h2>Reliability</h2>

<p>The 3 top issues are : </p>

<ul>
<li>service is not available (network) : we have to continuously check the service is available and fix the issue immediately. It can be a permanent or temporary network availability issue.</li>
<li>service is slow or is returning errors : errors must be automatically detected, sysadmin must be notified immediately to take action</li>
<li>service is returning incorrect result : current version of the service must have been validated by a QA team</li>
</ul>


<h2>Ease of deployment</h2>

<p>For the service to be easy to deploy:</p>

<ul>
<li>deployment is done via a single deploy command</li>
<li>deployment can made partially</li>
<li>constant checking is done during deployment</li>
<li>it’s always possible to come back</li>
<li>deploy a server farm is as simple as deploying a single server</li>
</ul>


<h2>Ease of testing and no-longer-painful maintenance</h2>

<p>Let’s imagine that:</p>

<ul>
<li>service execution data are collected and processed in realtime</li>
<li>execution data is automatically analysed</li>
<li>servers are automatically switched when necessary</li>
<li>it’s easy to add new servers when service load is increasing</li>
</ul>


<p>I&rsquo;m preparing a serie of article about Mesos / Marathon. This platform,  maybe, is a good opportunity to move in this direction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quel Avenir Pour Scala ? N'est Pas La Question. [FR]]]></title>
    <link href="http://jlcanela.github.io/blog/2013/02/26/quel-avenir-pour-scala-n-est-pas-la-question/"/>
    <updated>2013-02-26T02:27:22+01:00</updated>
    <id>http://jlcanela.github.io/blog/2013/02/26/quel-avenir-pour-scala-n-est-pas-la-question</id>
    <content type="html"><![CDATA[<p>J’ai été tenté d’écrire un article sur les incroyables capacités et potentiel du langage scala et de son écosystème. Quel que soit l’article vantant les mérites de telle ou telle technologie, que ce soit de la lessive, une voiture, le C++ et maintenant scala, on retrouve à peu prés les mêmes éléments marketing :« Performant » « Puissant » « Efficace » « Bla bla bla ».</p>

<h1>La technologie</h1>

<p>Lorsque l’on compare les différents langages, les différentes technologies, l’efficacité / performance varie souvent d’un facteur 3. En effet, l’accompagnement au changement, comme par exemple la formation, la migration logicielle, les changements dans les process de développement, etc, sont couteux et font que ce type de solution est difficilement maitrisable.</p>

<p>Ce n’est qu’en cas de saut technologique que ce facteur peut être largement supérieur - je ne parle pas des dépliants publicitaires bien sûr -.</p>

<h1>Sommes nous bloqués là ?</h1>

<p>Quel est l’objectif réel lorsqu’on choisit une nouvelle technologie ? La raison est souvent : « déveloper plus vite ». Et pourquoi déveloper plus vite ? <em>Pour livrer plus vite</em>.</p>

<h1>L’équipe</h1>

<p>Livrer plus vite. Une solution est d’utiliser une équipe plus compétente ou mieux formée:</p>

<ul>
<li>la recette idéale entre le meilleur ratio développeurs-seniors (+cher) et développeurs-juniors (moins-chers) est toujours en préparation;</li>
<li>le consensus est plutôt de bien maitriser la croissance de l’équipe et le « team building »;</li>
<li>la citation « neuf femmes ne font pas un bébé en un mois » est toujours d’actualité.</li>
</ul>


<p>En fonction de l’expérience, les développeurs vont choisir des solutions plus ou moins adaptées. La variabilité constatée est d’au moins entre 1 et 10, voire plus …</p>

<p>Livrer plus vite c’est bien, mais livrer quoi, telle est la question … ?</p>

<h1>Livrer, c’est quoi ?</h1>

<p>Il faut faire la différence entre:</p>

<ul>
<li>ce qui est livré : « la fonctionalité »;</li>
<li>celui qui l’utilise : l’utilisateur;</li>
<li>celui qui paye : l’acheteur.</li>
</ul>


<p>L’acheteur paye pour livrer la fonctionnalité à l’utilisateur.</p>

<p>Voici ce qui peut arriver:</p>

<ul>
<li>peu de livraisons ou peu d’utilisateur = faible nombre de transactions</li>
<li>valeur ajoutée fournie par la fonctionalité trop faible = transactions de faible montant</li>
<li>pas d’acheteur = pas de paiement</li>
</ul>


<p>La valeur ajoutée est déterminée en fonction du service rendu, et non pas en fonction du coût de production. Celle-ci pourrait concerner par exemple l’augmentation des revenus, la projection de la marque ou la rétention des clients.</p>

<h1>L’organisation</h1>

<p>Imaginons une organisation dont le contexte est le suivant:</p>

<ul>
<li>1.000.000 de clients, en constant renouvellement;</li>
<li>le coût du service est de 30€ / mois</li>
</ul>


<p>Considérons une fonctionalité de rétention des clients:</p>

<ul>
<li>rétention de 5.000 clients / mois;</li>
<li>bénéfice attendu = 150 k€ / mois</li>
<li>coût de développement négligeable = 10j de développeur</li>
<li>délai de livraison = 1 mois</li>
</ul>


<p>L’organisation dispose de plusieurs paramètres pour optimiser son développement. Les voici ordonnée par impact financier:</p>

<ul>
<li>sélection de la bonne fonctionnalité</li>
<li>réduction du délai de livraison - hypothèse de « déploiement continu » -</li>
<li>réduction du coût de développement</li>
</ul>


<p>On saisit rapidement l’impact des projets organisés autour de l’optimisation de la livraison de valeur ajoutée. La stratégie est tout simplement de commencer la livraison de la valeur ajoutée la plus élevée en premier.</p>

<p>On peut évaluer, au minimum, une différence de productivité (financiaire) de 1 à 100 entre les organisations qui tirent profit de ce type d’optimisations et les autres.</p>

<h1>Et scala dans tout ça ?</h1>

<p>Développer, en scala ou dans quelque langage que ce soit, ne me parait être en aucune façon une garantie de succès. L’impact de l’organisation sur le succès ou l’échec d’un projet me parait bien supérieur:</p>

<p>Impact de l’organisation : 1 à 100;
Impact des équipes : 1 à 10;
Impact des technologies : 1 à 3.
Si pour vous « retrospective meeting » ne rime pas avec itération, les méthodes agiles peuvent vous apporter un vrai plus dans votre productivité quotidienne.</p>

<p>Si pour vous un « retrospective meeting » est indispensable après chaque itération; je vous fais totalement confiance car au final vous avez obtenu votre organisation avec les bonnes personnes, les bons profils, et les bonnes technologies. D’ailleurs, vous avez déjà décidé sur le fait d’utiliser Scala ou non, n’est-ce pas ?</p>

<p>CQFD : « Quel avenir pour Scala ? » n’est pas la question.</p>
]]></content>
  </entry>
  
</feed>
